===============================================================================
== Game System Description Language (GDSL)
===============================================================================

GDSL is an internal domain specific language (DSL) targeting the Role 
Playing Game domain. This is a short introduction to GDSL.

The language is untyped (for now). All variable data is entered as 
double quoted strings. All unquoted strings are keywords.

GDSL is container orientated. Almost everything goes inside a container.
A container is denoted by curly brackets {}. Single statements are line 
orientated. I.e. the statement is terminated at the end of the line indicated
as EOL in the text.

Keywords are case sensitive and are always lower case. Following is a 
description of each keyword. The paragraph starts with the formal usage
of the keyword followed by a brief description and an example.


system <value> {}
-------------------------------------------------------------------------------
system is the outermost conatiner. It is the first item in the file. The 
parameter <value> is a quoted string used for descriptive purposed. The
allowable items inside the system container are:
  * sources       (1)
  * character     (1)
  * tables        (1)
  * hooks         (1)
  * fonts         (1)
  * forms         (1)
  * sheets        (1)

The items in the container must follow this order. You cannot place table above
source or character below table, etc.

example: system "D&D 4e" {}

sources {}
-------------------------------------------------------------------------------
sources is a container item. It holds any number of source items.

example: sources {}


source <value> EOL
-------------------------------------------------------------------------------
source is a line oriented item. The parameter value is a descriptive value of
some source material.

example: source "Players Handbook" EOL


character {}
-------------------------------------------------------------------------------
character is a container indicated the start of character definition. The 
allowable items inside the character container are:
  * group       (0..n)

example: character {}


group <value> {}
-------------------------------------------------------------------------------
group is a container used to group data fields in a logical manner. The parameter 
value is a descriptive, unique name of the group. You are not allowed to create 
two groups with the same name. The name of the group is used during various data
field create methods and is indicated therein.

The allowable items inside the group container are:
   * field      (0..n)
   * lookup     (0..n)
   * half       (0..n)
   * modifier   (0..n)
   * add        (0..n)

The order of the items in this container do not matter. You can place these
items in any order that you would like. Any data fields that are created
(through field, lookup, half, etc) are created and stored in the order you
specify.

example: group "Ability" {}


field <value> EOL
-------------------------------------------------------------------------------
field is a line orientated item. It is used to create a non-computed,
non-lookup data field. The parameter value is the name of the field. Other
keywords (macros) can use the name of this field in their computations.

example: field "Speed"


lookup <value> EOL
-------------------------------------------------------------------------------
lookup is a line orientated item. It is used to create a field whos value will
be looked up out of a table. The parameter value is both the name of this field
and the name of the table that will be used to lookup allowable values for this
field. A table must exist with the same name as the field.

example: lookup "Race"


half <value> EOL
-------------------------------------------------------------------------------
half is a line orientated item. It is used to create a calculated field whos
value will be half the value of the target field, rounded down. The paramater
value is the name of the target field. The new data field will have the name
"Half " + the name of the target field. E.g. half "Level" will create a data
field called "Half Level".

example: half "Level"


modifier <value> EOL
-------------------------------------------------------------------------------
modifier is a line orientated item. It is used to create a calculated field whos
value will be looked up from a modifier table. The parameter value is the name
of the target field. The name of the lookup table is derived from the name of
the group that the statement is in. The name of the new data field will be
calculated as <group name> <target field name> Modifier. The example below
will help clarify.

    group "Ability" {
      field "STR"
      modifier "STR"
    }

In this example, there must be a table named "Ability" that will be used to
calculate the modifier. The target field is "STR" and the newly created
calculated field will be called "STR Ability Modifier"

example: modifier "STR"


add <value 1> + <value 2> EOL
-------------------------------------------------------------------------------
add is a line orientated item. It is used to create a calculated field whos
value is the addition of two values. The implementation is very basic at this
time and only allows for two values to be added together. I.e. add "1" + "2" + "3"
is not allowed.

The value parameters can either be an integer value quoted or the name of another
data field. I.e  add "STR Ability Modifier" + "Half Level" is valid but so is
add "10" + "Half Level" or add "10" + "10"

If a field name exists then the value of this field it is used, otherwise and attempt
to convert the string to an integer is done.

The resulting data field name will be <value 1> Plus <value 2>. E.g.
add "STR Ability Modifier" + "Half Level"  will result in a field name of
"STR Ability Modifier Plus Half Level"

example: add "STR Ability Modifier" + "Half Level"


tables {}
-------------------------------------------------------------------------------
tables is a container item. It holds any number of table items.

example: tables {}


table <value> {}
-------------------------------------------------------------------------------
table is a container orientated item. It is used to create lookups and calculations
for data field values. The parameter value is a descriptive, unique name of the
table. You are not allowed to create two tables with the same name.

The allowable items inside the table container are:
   * auto      1
   * item     (0..n)

The items in this container must follow this order. You are not allowed to place
auto below item.

example: table "Ability" {}


auto <value> EOL
-------------------------------------------------------------------------------
auto is a line orientated item. It is used in a table to indicate that items are
automatically picked from this table and that the end user has no choice as to
which item is picked. The parameter value is the target data field name. The
value of that data field will be used to pick the value from the table.

example: auto "Level"

item <value> {}
-------------------------------------------------------------------------------
item is a container orientated item. It is an entry into the table. It is one
of the things that can be picked from the table. The parameter value is the name
of the item. The name must be unique within the scope of the table. No other
item in the table is allowed the same name. The same name can be used in a
different table with no problem.

The allowable items within the item container are:

  * value    (0..1)
  * info     (0..n)
  * bonus    (0..n)
  * base     (0..n)

While the number of times you use the value keyword is not enforce, each one
will overwrite the proceeding one, meaning that its usage is (0..1).

In auto mode, when matches are performed against the items in the table, a key
is used to lookup the item. First the key is matched against the item name.
If no match was found on any item then an attempt on a ranged key/name combo
is preformed.

To create ranged key/name combos, the key must be a number and the name must
be two numbers denoting a range. I.e. "2..7".

With ranges you can make a mistake and alow for multipule matched. For example,
if you have 2 items with the names "1..10" and "5..15" and a ranged search is
performed on the key "6" they will both match. The system takes the first match
and stops matching.

An example of what all of this is used for will make it clearer. Given the
following:

  system "sample" {
    character {
      group "General" {
        field "Level"
      }
      group "Ability" {
        field     "STR"
        modifier  "STR"
      }
    }

    table "Ability" {
      auto "Level"
      item "1..5"  {value "+1" }
      item "6..10" {value "+2" }
    }
  }

If the characters "Level" was "2" then the field "STR Ability Modifier" would
be set to "+1". If the characters "Level" was "7" then the field
"STR Ability Modifier" would be set to "+2"

example: item "Dragonborn" {}


value <value> EOL
-------------------------------------------------------------------------------
value is a line orientated item. It is used to set the value of an item in a
table. The parameter value is the value that will be set. This is an optional
item. If it is not used, the value of the item in the table will be the same
as its name.

example: value "-3";



hooks {}
-------------------------------------------------------------------------------
hooks is a container item. It is used to hook the game system into the various
applications in the software. It is concerned with hooking the game system
to the graphical user interface. All items inside the hooks container should
only appear once. This is not enforced. If they appear multipule times,
they will keep overwriting each other making the last one the active one.

Allowable items in this container are:
  * list_character_by       (1)

example: hooks {}


list_character_by <value> EOL
-------------------------------------------------------------------------------
list_character_by is a line oriented item. This is used to determine which
field should be used when the GUI is displaying a list of characters. The
parameter value is the name of a field.

example: list_character_by "Character Name"


forms {}
-------------------------------------------------------------------------------
forms is a container item. It holds any number of form items.

example: forms {}


form <value> {}
-------------------------------------------------------------------------------
form is a container item. It is used to describe a form that will be displayed
in the GUI. The parameter value is the name of the form. The form must have a
unique name.



sheets {}
-------------------------------------------------------------------------------
sheets is a container item. It holds any number of sheet items.

example: sheets {}




