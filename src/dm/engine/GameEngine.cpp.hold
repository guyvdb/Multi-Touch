/* -------------------------------------------------------------------------------------------
 *                                  M U L T I - T A B L E
 *  -------------------------------------------------------------------------------------------
 *                               Copyright 2011 Guy van den Berg
 *                                      All Rights Reserved
 * ------------------------------------------------------------------------------------------- */
#include <QDebug>
#include <QSqlQuery>
#include <QSqlError>
#include <QVariant>
#include "GameEngine.h"


/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
GameEngine::GameEngine() :   QObject(), map(0)
{
  this->database = QSqlDatabase::addDatabase("QSQLITE");
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
GameEngine::~GameEngine() {
  if(this->isGameLoaded()) this->closeGame();
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
void GameEngine::setMapScene(MT::MapScene *map) {
  this->map = map;
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
bool GameEngine::isGameLoaded() {
  return this->database.isOpen();
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
void GameEngine::closeGame() {
  if(this->isGameLoaded()) {
    this->database.close();
  }
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
void GameEngine::openGame(const QString name) {
  if(this->isGameLoaded()) this->closeGame();

  qDebug() << "[GAME ENGINE] open " << name;
  this->name = name;
  this->database.setDatabaseName(name);
  //this->database.
  bool open = this->database.open();

  qDebug() << "[GAME ENGINE] game file open = " << open;

  if(!open) {
    qDebug() << "[GAME ENGINE] error: " << this->database.lastError();
  }

  qDebug() << "[GAME ENGINE] create game file structure";
  this->checkCreateTables();



}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
void GameEngine::addMap(const QString name) {

}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
void GameEngine::removeMap(const QString name) {

}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
QString GameEngine::getDefaultMapName() {
  return this->getSetting("DEFAULT_MAP_NAME");
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
void GameEngine::setDefaultMapName(const QString name) {
  this->setSetting("DEFAULT_MAP_NAME",name);
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
void GameEngine::setSetting(const QString key, const QString value) {
  if(this->settingKeyExists(name)) {
    this->executeStatement("UPDATE settings SET key = '" + value + "' WHERE key = '" + key + "'");
  } else {
    this->executeStatement("INSERT INTO settings VALUES ('" + key + "','" + value + "');");
  }
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
QString GameEngine::getSetting(const QString key) {
  QSqlQuery query(this->database);
  query.exec("SELECT value FROM settings WHERE key = '" + key + "';");
  if(query.next()) {
    return query.value(0).toString();
  } else {
    return "";
  }
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
bool GameEngine::settingKeyExists(const QString key) {
  QSqlQuery query(this->database);
  query.exec("SELECT key FROM settings WHERE key ='" + key + "';");
  return query.next();
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
void GameEngine::checkCreateTables() {
  if(!this->tableExists("settings")) this->createTableSettings();
  if(!this->tableExists("maps")) this->createTableMaps();
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
bool GameEngine::tableExists(const QString name) {
  QSqlQuery query(this->database);
  query.exec("SELECT name FROM sqlite_master WHERE type = 'table' AND name ='" + name + "'");
  return query.next();
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
void GameEngine::executeStatement(const QString statement) {
  QSqlQuery query(this->database);
  query.exec(statement);
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
void GameEngine::createTableSettings() {
  this->executeStatement("CREATE TABLE settings (key VARCHAR, value VARCHAR);");
}

/* -------------------------------------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------- */
void GameEngine::createTableMaps() {
  this->executeStatement("CREATE TABLE maps (name VARCHAR, filename VARCHAR);");
}
