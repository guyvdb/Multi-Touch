#include "ModulePipeline.h"


namespace mtv {

  /* -------------------------------------------------------------------------------------------
   * Get the one and only instance
   * ------------------------------------------------------------------------------------------- */
  ModulePipeline* ModulePipeline::instance() {
    if(pipeline == 0x0) {
      pipeline = new ModulePipeline();
    }
    return pipeline;
  }

  /* -------------------------------------------------------------------------------------------
   * Free the pipeline
   * ------------------------------------------------------------------------------------------- */
  void ModulePipeline::free() {
    if(pipeline) delete pipeline;
  }

  /* -------------------------------------------------------------------------------------------
   * Private constructor
   * ------------------------------------------------------------------------------------------- */
  ModulePipeline::ModulePipeline() {

  }

  /* -------------------------------------------------------------------------------------------
   * Get the last error message
   * ------------------------------------------------------------------------------------------- */
  QString ModulePipeline::getLastError() const {
    return this->lastError;
  }

  /* -------------------------------------------------------------------------------------------
   * Enabel a module
   * ------------------------------------------------------------------------------------------- */
  bool ModulePipeline::enableModule(Module* module) {
    /*Module *existing = this->getNamedModule(module->getName());
    if(existing == 0x0) {
      this->modules.append(module);
      return true;
    } else {
      this->lastError = "Module ";
    }*/
  }

  /* -------------------------------------------------------------------------------------------
   * Enabel a module
   * ------------------------------------------------------------------------------------------- */
  bool ModulePipeline::enableModule(const QString name) {

  }

  /* -------------------------------------------------------------------------------------------
   * disabel a module
   * ------------------------------------------------------------------------------------------- */
  bool ModulePipeline::disableModule(Module* module) {

  }

  /* -------------------------------------------------------------------------------------------
   * disabel a module
   * ------------------------------------------------------------------------------------------- */
  bool ModulePipeline::disableModule(const QString name) {

  }

  /* -------------------------------------------------------------------------------------------
   * get list of active modules - make a copy
   * ------------------------------------------------------------------------------------------- */
  void ModulePipeline::getModules(QList<Module*> &result) {

  }

  /* -------------------------------------------------------------------------------------------
   * get the first module in the pipeline
   * ------------------------------------------------------------------------------------------- */
  Module *ModulePipeline::getFirstEnabledModule() {

  }

  /* -------------------------------------------------------------------------------------------
   * get the last module in the pipeline
   * ------------------------------------------------------------------------------------------- */
  Module *ModulePipeline::getLastEnabledModule() {

  }

  /* -------------------------------------------------------------------------------------------
   *
   * ------------------------------------------------------------------------------------------- */
  Module *ModulePipeline::getNamedModule(const QString name) {
    /*
    foreach(Module* module, this->modules) {
      if(module->name() == name) return module;
    }
    return 0x0;
    */
  }





}
